import java.util.Comparator;

/**
 * This is a Comparator class for the Food class. This class enables us to directly compare Food objects, which in turn
 * enables us to easily sort the list of Food objects created in the Thanksgiving class. This class implements the
 * Comparator interface, and thus must define the two methods declared in Comparator; namely compare() and equals().
 *
 * @author Tucker Dickson
 * @version 1.0
 * @since 10/24/2021
 */
public class FoodComparator implements Comparator<Food> {

    /**
     * This method will allow us to directly compare objects of the Food class. For the purposes of this program, we
     * will be comparing Food objects on their evRatios. This method is declared in the Comparator interface.
     *
     * @param food1 This Food object is the first of the two Food objects we will be comparing.
     * @param food2 This Food object is the second of the two Food objects we will be comparing.
     * @return This method returns an int (specifically -1, 0, or 1) depending on how the evRatios of the two Food
     *          objects compare.
     */
    @Override
    public int compare(Food food1, Food food2) {
        // if the evRatio of food1 is greater than the evRatio of food2, return -1
        if (food1.getEvRatio() > food2.getEvRatio()) {
            return -1;
        }
        // if the evRatio of food1 is less than the evRatio of food2, return 1
        else if (food1.getEvRatio() < food2.getEvRatio()) {
            return 1;
        }
        // if the two evRatios are equal, return 0
        else {
            return 0;
        }
    }

    /**
     * This method allows us to compare two Food objects; specifically to check for equality. This method is declared
     * in the Comparator interface, and thus must be defined in this class. However, since this method is never used in
     * the program, the definition has been left as the default definition generated by IntelliJ.
     *
     * @param o This object of Object class would normally be checked for equality against another object of Object class.
     * @return This function returns false.
     */
    @Override
    public boolean equals(Object o) {
        return false;
    }
}
